import os
import json
import base64
import time
import random
import requests
from pathlib import Path
from together import Together
from dotenv import load_dotenv

load_dotenv()
TOGETHER_API_KEY = os.environ.get("TOGETHER_API_KEY")
DEBUG = os.environ.get("DEBUG", "false").lower() == "true"

def load_prompts(json_path):
    """Load prompts from a JSON file generated by SequentialImagePromptGenerator"""
    with open(json_path, 'r') as f:
        data = json.load(f)
    return data.get("prompts", [])

def download_image(url, output_path):
    """Download image from URL and save to the specified path"""
    try:
        response = requests.get(url, stream=True)
        response.raise_for_status()
        
        with open(output_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
                
        return output_path
    except Exception as e:
        raise Exception(f"Failed to download image from URL: {e}")

def generate_image_with_retry(client, prompt, model, output_path, steps=4, max_retries=6, base_delay=1.0):
    """Generate an image with retry logic for rate limits"""
    # Validate steps parameter for FLUX model
    if "flux" in model.lower() and (steps < 1 or steps > 4):
        print(f"Warning: FLUX models require steps between 1-4. Adjusting from {steps} to 4.")
        steps = 4
        
    retries = 0
    while retries <= max_retries:
        try:
            print(f"Sending request to Together API with model={model}, steps={steps}")
            print(f"Prompt: {prompt[:100]}..." if len(prompt) > 100 else f"Prompt: {prompt}")
            
            response = client.images.generate(
                prompt=prompt,
                model=model,
                steps=steps,
                n=1
            )
            
            # Debug information
            if DEBUG:
                print(f"API Response Type: {type(response)}")
                print(f"API Response: {response}")
                print(f"Data attributes: {dir(response.data[0]) if hasattr(response, 'data') and response.data else 'N/A'}")
            
            # Check response structure
            if not hasattr(response, 'data'):
                print("ERROR: Response does not contain 'data' attribute")
                print(f"Response structure: {dir(response)}")
                raise Exception("Invalid response format - missing data attribute")
            
            if not response.data or len(response.data) == 0:
                print("ERROR: Response data is empty")
                print(f"Full response: {response}")
                raise Exception("Empty data in response")
            
            # Check for URL in response
            if hasattr(response.data[0], 'url') and response.data[0].url:
                print(f"Image URL found in response: {response.data[0].url}")
                download_image(response.data[0].url, output_path)
                print(f"Saved image to {output_path}")
                return output_path
                
            # Check for b64_json in response  
            elif hasattr(response.data[0], 'b64_json') and response.data[0].b64_json:
                img_data = base64.b64decode(response.data[0].b64_json)
                with open(output_path, 'wb') as img_file:
                    img_file.write(img_data)
                print(f"Saved image to {output_path}")
                return output_path
            
            else:
                # Check all available attributes
                print("ERROR: Neither URL nor b64_json found in response")
                print(f"Available attributes: {dir(response.data[0])}")
                
                # Try to extract any useful information from response
                for attr_name in dir(response.data[0]):
                    if not attr_name.startswith('_') and not callable(getattr(response.data[0], attr_name)):
                        attr_value = getattr(response.data[0], attr_name)
                        print(f"Attribute {attr_name}: {attr_value}")
                        
                        # If attribute looks like a URL, try to download it
                        if isinstance(attr_value, str) and (attr_value.startswith('http://') or attr_value.startswith('https://')):
                            try:
                                print(f"Attempting to download from potential URL: {attr_value}")
                                download_image(attr_value, output_path)
                                print(f"Saved image to {output_path}")
                                return output_path
                            except Exception as e:
                                print(f"Failed to download from potential URL: {e}")
                
                raise Exception("No image data or URL found in response")
                
        except Exception as e:
            # Check various errors
            error_message = str(e).lower()
            
            # Handle specific errors
            if "steps must be between" in error_message:
                print(f"Steps parameter validation failed. Adjusting steps to 4 and retrying.")
                steps = 4
                continue
            
            # API key issues
            if "api key" in error_message or "authentication" in error_message or "auth" in error_message:
                print("\nERROR: API key issue detected. Please check your TOGETHER_API_KEY environment variable.")
                print(f"API Key (masked): {TOGETHER_API_KEY[:4]}...{TOGETHER_API_KEY[-4:] if TOGETHER_API_KEY and len(TOGETHER_API_KEY) > 8 else 'N/A'}")
                
            # Rate limit errors
            if "rate limit" in error_message or "429" in error_message:
                retries += 1
                if retries > max_retries:
                    raise Exception(f"Maximum retries exceeded. API quota limit reached: {e}")
                
                delay = base_delay * (2 ** retries) + random.uniform(0, 1)
                print(f"Rate limit hit. Retrying in {delay:.1f} seconds... (Attempt {retries}/{max_retries})")
                time.sleep(delay)
                continue
            
            # General error
            print(f"\nERROR Details: {e}")
            raise Exception(f"Image generation error: {str(e)}")

def generate_images_from_prompts(
    json_path, 
    output_dir="/Users/jeevanbhatta/SkillMitra/backend/outputs",
    model="black-forest-labs/FLUX.1-schnell-Free", 
    steps=4
):
    """Generate images from a sequence of prompts and save them with numerical order"""
    # Create the output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)
    
    # Load the prompts
    prompts = load_prompts(json_path)
    if not prompts:
        print(f"No prompts found in {json_path}")
        return []
    
    print(f"Loaded {len(prompts)} prompts from {json_path}")
    
    # Initialize Together client
    client = Together(api_key=TOGETHER_API_KEY)
    
    # Generate images for each prompt
    generated_paths = []
    for i, prompt in enumerate(prompts):
        print(f"\nGenerating image {i+1}/{len(prompts)}")
        output_path = os.path.join(output_dir, f"frame_{i+1:04d}.png")
        
        try:
            generate_image_with_retry(client, prompt, model, output_path, steps)
            generated_paths.append(output_path)
            
            # Add a small delay between requests to avoid rate limiting
            if i < len(prompts) - 1:
                time.sleep(0.5)
        except Exception as e:
            print(f"Error generating image {i+1}: {str(e)}")
            print(f"Stopping generation. {len(generated_paths)} images were successfully generated.")
            break
    
    return generated_paths

if __name__ == "__main__":
    import sys
    import argparse
    
    parser = argparse.ArgumentParser(description='Generate images from prompt JSON file')
    parser.add_argument('json_path', help='Path to JSON file with prompts')
    parser.add_argument('--model', default="black-forest-labs/FLUX.1-schnell-Free", help='Model to use')
    parser.add_argument('--steps', type=int, default=4, help='Number of diffusion steps (1-4 for FLUX models)')
    parser.add_argument('--debug', action='store_true', help='Enable debug output')
    
    args = parser.parse_args()
    
    if args.debug:
        os.environ['DEBUG'] = 'true'
        DEBUG = True
    
    print("\n=== Together AI Image Generator ===")
    print(f"JSON Path: {args.json_path}")
    print(f"Model: {args.model}")
    print(f"Steps: {args.steps}")
    print(f"Debug: {DEBUG}")
    
    if not TOGETHER_API_KEY:
        print("\nERROR: TOGETHER_API_KEY environment variable is not set")
        print("Please set it in your .env file or export it directly:")
        print("export TOGETHER_API_KEY=your_api_key_here")
        sys.exit(1)
        
    print(f"\nAPI Key (masked): {TOGETHER_API_KEY[:4]}...{TOGETHER_API_KEY[-4:] if len(TOGETHER_API_KEY) > 8 else ''}")
    
    generate_images_from_prompts(args.json_path, model=args.model, steps=args.steps)
    
    print("\n=== Troubleshooting Tips ===")
    print("1. Make sure your Together API key is correct and has access to the model")
    print("2. Check that the model name is correct: black-forest-labs/FLUX.1-schnell-Free")
    print("3. Run with --debug flag for more detailed error information")
    print("4. Visit https://together.ai/docs/reference/image-generation for API documentation")
    print("5. Try with a simple test prompt to verify API connectivity")
